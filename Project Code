#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

void createVector(vector<string> vArray[], int& n)       
{
	cout << "How much elements do you want the range to have?";
	int VectorSize;                                      
	cin >> VectorSize;
	for (int j = 1; j <= VectorSize; j++) {
		string element;
		cin >> element;                               
		vArray[n].push_back(element);
	}
}

void addVector(vector<string> vArray[], int& n)      
{
int br;
cout << "how many new ranges do you want to add?" << endl;                        
cin >> br;

for (int i = 0; i < br; i++)                         
  {
	  createVector(vArray, n);
	  n++;
  }
}

void printVector(vector<string >vArray[], int& n)   
{
	if (n > 0)                                     
	{
		for (int i = 0; i < n; i++) {
			cout << "Elements at index "
				<< i << ": ";
			for (auto it = vArray[i].begin();     
				it != vArray[i].end(); it++) {

				
				cout << *it << ' ';
			}
			cout << endl;
		}
	}
	else
	{
		cout << "There are no ranges inserted yet. " << endl << endl
			<< "You can insert some using the |Vkarvane na mnojestva| button of the menu." << endl << endl;
	}
}

bool checkIndex(int v1, int v2, int& n)
{
	if (v1 > n or v2 > n or v1 < 0 or v2 < 0 or v1 == v2) 
	{
		                          
	 if (v1 == v2)
	  {
	    cout << "Please choose two different indexes :";
	    cout << endl;
	  }
         else
	  {
	   cout << "Index not found. Please try again :";
	   cout << endl;
	  }
	return false;
	}
	else
	{
	   return true;
	}
}

void Difference(vector<string >vArray[], int& n)   
{

	vector<string> copy1;
	vector<string> copy2;
	vector<string> Difference(10);
	vector<string>::iterator i ; 
	int num;
	if (n > 0)
	{
		cout << "type the indexes of the ranges you want to use?";
		int v1, v2;
		cin >> v1 >> v2;           
		if (checkIndex(v1, v2, n) == 0)    
		{
			do                        
			{
				cin >> v1 >> v2;
			} while (checkIndex(v1, v2, n) == 0);
		}

		copy1 = vArray[v1];
		copy2 = vArray[v2];


		sort(copy1.begin(), copy1.end());     
		sort(copy2.begin(), copy2.end());      

		i = set_difference(copy1.begin(), copy1.end(), copy2.begin(), copy2.end(), Difference.begin());  
																										  //The result is an iterator pointing to the end of the range

		Difference.resize(i - Difference.begin());

		cout << "The difference has " << (Difference.size()) << " elements:";
		cout << endl;
		for (i = Difference.begin(); i != Difference.end(); ++i) 
			cout << ' ' << *i;
		cout << endl;
	}
	else
	{
		cout << "There are no ranges inserted yet. " << endl << endl
			<< "You can insert some using the |Vkarvane na mnojestva| button of the menu." << endl << endl;
	}
}

void SymmetricDifference(vector<string >vArray[], int& n)     
{

	vector<string> copy1;
	vector<string> copy2;
	vector<string> Sdifference(10);
	vector<string>::iterator i;   
	if (n > 0)
	{
		cout << "type the indexes of the ranges you want to use?";
		int v1, v2;
		cin >> v1 >> v2;     

		if (checkIndex(v1, v2, n) == 0)  
		{
			do                
			{
				cin >> v1 >> v2;
			} while (checkIndex(v1, v2, n) == 0);
		}
		copy1 = vArray[v1];
		copy2 = vArray[v2];


		sort(copy1.begin(), copy1.end());      
		sort(copy2.begin(), copy2.end());        

		i = set_symmetric_difference(copy1.begin(), copy1.end(), copy2.begin(), copy2.end(), Sdifference.begin());    
																														   //The result is an iterator pointing to the end of the range
		Sdifference.resize(i - Sdifference.begin());

		cout << "The symmetric difference has " << (Sdifference.size()) << " elements:";
		cout << endl;
		for (i = Sdifference.begin(); i != Sdifference.end(); ++i)   
			cout << ' ' << *i;
		cout << endl;
	}
	else
	{
		cout << "There are no ranges inserted yet. " << endl << endl
			<< "You can insert some using the |Vkarvane na mnojestva| button of the menu." << endl << endl;
	}
}




int main()
{
	vector<string> vArray[100];
	int n = 0;
bool doShowMenu;
	do
  {
		doShowMenu = showMenu(vArray, n);
	}
  while (doShowMenu);
}
